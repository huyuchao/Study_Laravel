composer.json 自动加载的地方? 怎么配置。


php 版本查看： php -v
PHP 5.6.28 (cli) (built: Nov  9 2016 06:40:27)

composer版本查看
composer --version
Composer version 1.4.2 2017-05-17 08:17:52

laravel 版本
php artisan --version
Laravel Framework 5.4.28

laravel Installer版本
laravel --version
Laravel Installer 1.3.7



/* 判断常量是否存在*/
if (defined('MYCONSTANT')) {}

//判断变量是否存在
if (isset($myvar)) {}

//判断函数是否存在
if (function_exists('imap_open')) {} else {}





php artisan serve  启动本地php服务器

csrf 默认开启保护（post请求要加特殊处理）

创建中间件命令：
php artisan make:middleware CheckAge

中间件的注册及参数

一般中间件：请求前处理，请求后处理
Terminable 中间件


控制器：控制器被存放在 app/Http/Controllers 目录下

控制器的创建
控制器的配置（路径问题）

控制器也可以指定中间件
1，配置路由是指定     Route::get('profile', 'UserController@show')->middleware('auth');
2，控制器构造方法中指定（单独中间件或者闭包中间件）


资源控制器
php artisan make:controller PhotoController --resource

资源路由：
Route::resource('photos', 'PhotoController');


请求：-----------------------------------------------
Request：Illuminate\Http\Request

依赖注入请求对象

PSR-7 请求

输入数据的预处理和规范化：在 Laravel 的全局中间件中默认包含了 TrimStrings 和 ConvertEmptyStringsToNull 两个中间件。这些中间件被列在 App\Http\Kernel 类中。它们会自动处理所有请求中传入的字符串字段，比如将空的字符串字段转变成 null 值


获取输入数据：
$input = $request->all();

$name = $request->input('name','default value')

如果传输表单数据中包含「数组」形式的数据，那么可以使用「点」语法来获取数组：
$name = $request->input('products.0.name');
$names = $request->input('products.*.name');

通过动态属性获取输入数据
$name = $request->name;

Laravel 在处理动态属性的优先级是，先从请求的数据中查找，没有的话再到路由参数中找。

确定是否有输入值
if ($request->has('name')) {
    //
}

Cookies-------------------------------  默认 Laravel 创建的所有 Cookie 都是加密过的
从请求中获取 Cookie 值
$value = $request->cookie('name');

将 Cookies 附加到响应
return response('Hello World')->cookie(
    'name', 'value', $minutes
);


生成 Cookie 实例,并响应到response
$cookie = cookie('name', 'value', $minutes);
return response('Hello World')->cookie($cookie);


文件资源-------------------------------------
获取上传文件
$file = $request->file('photo');
$file = $request->photo;

文件是否存在
if ($request->hasFile('photo')) {
    //
}
文件是否有效：是否上传成功
if ($request->file('photo')->isValid()) {
    //
}

文件路径 & 扩展
$path = $request->photo->path();  文件路径
$extension = $request->photo->extension();  文件扩展名(可能跟原始的不一样)


储存上传文件
$path = $request->photo->store('images');
$path = $request->photo->storeAs('images', 'filename.jpg');


store 方法允许存储文件到相对于文件系统根目录配置的路径。这个路径不能包含文件名，名称将使用 MD5 散列文件内容自动生成。

store 方法还接受一个可选的第二个参数，用于文件存储到磁盘的名称。这个方法会返回文件相对于磁盘根目录的路径：

Response响应----------------------------------------------------
1，字符串 & 数组
Route::get('/', function () {
    return 'Hello World';
});

2，响应对象
Route::get('home', function () {
    return response('Hello World', 200)
                  ->header('Content-Type', 'text/plain');
});
附加头信息至响应
return response($content)
            ->header('Content-Type', $type)
            ->header('X-Header-One', 'Header Value')
            ->header('X-Header-Two', 'Header Value');

withHeaders  数组结构：
return response($content)
            ->withHeaders([
                'Content-Type' => $type,
                'X-Header-One' => 'Header Value',
                'X-Header-Two' => 'Header Value',
            ]);

附加 Cookie 至响应
return response($content)
                ->header('Content-Type', $type)
                ->cookie('name', 'value', $minutes);

Cookies 加密  默认加密，所以客户端无法读取和操作。
不想加密：在中间件中去除
App\Http\Middleware\EncryptCookies

/**
 * 无需被加密的 cookie 名
 *
 * @var array
 */
protected $except = [
    'cookie_name',
];


重定向 redirect函数 --------------------------
Route::get('dashboard', function () {
    return redirect('home/dashboard');
});

back函数：
Route::post('user/profile', function () {
    // 验证请求...

    return back()->withInput();
});

重定向至命名路由-----------------------
return redirect()->route('login');
return redirect()->route('profile', ['id' => 1]);

重定向至控制器行为---------------------------
return redirect()->action('HomeController@index');
return redirect()->action(
    'UserController@profile', ['id' => 1]
);

其他响应类型
视图响应
return response()
            ->view('hello', $data, 200)
            ->header('Content-Type', $type);

JSON 响应
return response()->json([
    'name' => 'Abigail',
    'state' => 'CA'
]);

文件下载-------------------------------
return response()->download($pathToFile);
return response()->download($pathToFile, $name, $headers);
管理文件下载的扩展包 Symfony HttpFoundation，要求下载文件名必须是 ASCII 编码。


Laravel 的 HTTP 会话机制  Session

Laravel 本身支持比较热门的 Session 后端驱动，如 Memcached、Redis 和数据库。

配置
config/session.php

Session 配置的 driver 的选项定义了每次请求的 Session 数据的存储位置。Laravel 附带了几个不错且可开箱即用的驱动：

    file - 将 Session 保存在 storage/framework/sessions。
    cookie - Session 保存在安全加密的 Cookie 中。
    database - Session 保存在关系型数据库。
    memcached / redis - 将 Sessions 保存在其中一个快速且基于缓存的存储系统中。
    array - 将 Sessions 保存在简单的 PHP 数组中，并只存在于本次请求.



---------------------------------------
Eloquent ORM    数据库和实体对象一一对应。  实体对象具有数据库操作的所有功能。

普通数据库查询：DB::select(); DB::insert();DB::update();DB:delete();


Eloquent模型通常放在 app 目录中，不过你可以将他们随意放在任何可通过 composer.json 自动加载的地方。
所有的 Eloquent 模型都继承自 Illuminate\Database\Eloquent\Model 类。

创建模型实例 make:model Artisan 命令：
php artisan make:model User

当你生成一个模型时想要顺便生成一个 数据库迁移，可以使用 --migration 或 -m 选项：
php artisan make:model User --migration

php artisan make:model User -m



获取集合  all和get
$users = UserSelf::all();
$users = UserSelf::where('userName',$username)->get(); // 所有符合条件的集合

获取单条数据
$user = UserSelf::where('userName',$username)->first();


分块结果
使用游标


取回单个模型／集合

// 通过主键取回一个模型...
$flight = App\Flight::find(1);

// 取回符合查询限制的第一个模型 ...
$flight = App\Flight::where('active', 1)->first();

「未找到」异常
有时候你可能希望在找不到模型时抛出一个异常，这在路由或是控制器内特别有用。
findOrFail 以及 firstOrFail 方法会取回查询的第一个结果。
如果没有找到相应结果，则会抛出一个 Illuminate\Database\Eloquent\ModelNotFoundException：

$model = App\Flight::findOrFail(1);

$model = App\Flight::where('legs', '>', 100)->firstOrFail();


聚合函数  count、sum、max
$count = App\Flight::where('active', 1)->count();
$max = App\Flight::where('active', 1)->max('price');

添加和更新模型

添加：new 一个新对象然后save
更新：先找到对象，然后在save


批量更新
批量赋值   可以被批量赋值的字段及 除了什么字段其他的都可以赋值。

其它创建的方法
你可以用来通过属性批量赋值创建你的模型：firstOrCreate 和 firstOrNew。

其次，你可能会碰到模型已经存在则更新，否则创建新模型的情形，Laravel 提供了一个 updateOrCreate 方法来一步完成该操作

删除模型  delete
$flight->delete();

通过主键来删除现有的模型
App\Flight::destroy(1);
App\Flight::destroy([1, 2, 3]);
App\Flight::destroy(1, 2, 3);

通过查询来删除模型
$deletedRows = App\Flight::where('active', 0)->delete();


$flight = App\Flight::find(1);
$flight->delete();

destroy方法：
App\Flight::destroy(1);
App\Flight::destroy([1, 2, 3]);
App\Flight::destroy(1, 2, 3);

软删除
查询被软删除的模型
恢复被软删除的模型
永久地删除模型



orm-作用域
全局作用域
应用全局作用域
匿名的全局作用域
移除全局作用域

本地作用域


数据库监听事件
Eloquent 模型会触发许多事件，让你在模型的生命周期的多个时间点进行监控： creating, created, updating, updated, saving, saved, deleting, deleted, restoring, restored.

观察者
如果你在一个给定的模型中监听许多事件，您可以使用观察者将所有监听器变成一个类。
观察者类里的方法名应该反映Eloquent想监听的事件。 每种方法接收 model 作为其唯一的参数。
Laravel不包括观察者默认目录，所以你可以创建任何你喜欢你的目录来存放



数据库模型关联
一对一
一对多
一对多（反向关联）
多对多：
课程表就是多对多   一门课对应多个学生选择 一个学生也可以有多个课程可以选
多对多关联关系一般需采用中间表的方式处理，将多对多转化为两个一对多。

远程一对多
多态关联
多态多对多关联





Eloquent: 集合  对数据的进一步封装   laravel自定义的集合：数据库模型操作结果集合



